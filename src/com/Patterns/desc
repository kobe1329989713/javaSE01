
模式，重点是你要知道到时，用的是哪个，因为模式，它都是一个体系，你知道用哪个时
就比较清晰点了。



除了哪23种外，还有如下几种模式。
    1、并发型模式。
    2、线程池模式。
    3、充血模式。
    4、频血模式。

总的原则：
    对扩展开放，对修改关闭。
设计模式的六大原则。
    1、单一职责原则。
    2、里氏替换原则。
    3、依赖倒转原则。
    4、接口隔离原则。
    5、迪米特法则（最少知道原则）
    6、合成复用原则。









如何提高自己的编码能力了？
    1、写更多的代码和看书。
    2、阅读别人的代码能让你的编码能力得到明显的提升。

应该阅读什么代码？
    1、阅读那些你用得着的代码。如：
        框架源代码，晨跑等。
        你非常喜欢的WordPress插件
        你觉得很有用的Ruby gem工具包
        你可能还会使用到的jQuery 插件
     这些前提是：你必须要熟悉了它们的公共API
    2、阅读那些你印象深刻的代码。
    3、阅读那些让你尊敬的大师写出来的代码。
    4、阅读那些能给你带来灵感的代码。

如何阅读？
    1、先看大框架。
        你至少在宏观层面上知道你所读的代码是如何实现的，如果不知道的话
        你应用去学基础部分，如：阅读项目的网站(官网)、教程、文档，
        好了，如果上面的步骤完成了，那我建议你第一步就是先大致浏览一下项目的架构。
        这个阶段的工作量根据你选择的代码库大小的不同也不一样，但是还是需要一点时间的。
        首先，注意文件结构。这一步可以使用一些具有文件夹层次结构视图的编辑器提供帮助
        这一步的目标是熟悉源代码。找出哪些文件包含/请求/加载其他文件，其中大部分代码在哪里，
        如果有的话，使用的命名空间是什么，以及这些性质。一旦你掌握了大局，你就可以深入挖掘细节了。
         所以要先知道大概了以后，在去研究细节部分。
    2、记录阅读心得。
        阅读代码不应该是一种被动的行为。当你开始理解程序流时，我鼓励你在开始时添加注释，记录你的假设和结论。
        边阅读边测试，
    3、亲自动手做。
        谁说阅读代码时双手就得闲着?只有当你把所有的东西都打乱了，
        然后自己试着重新拼装好时，才能在这个过程中真正理解。
        还记得那些通过的测试吗?想办法让它们失败，添加更多，
        或者尝试更改实现的逻辑而不破坏它们。尝试添加一个你认为很酷的小功能，
        或者设置项目范围的日志记录，这样就可以在代码的不同阶段打印输出。
        这还是在阅读吗?当然，但在这一点上，就得取决于自己的选择了，
        看你是把它当作冒险来看，还是把他当作一本神秘的小说来看了。这是一件好事！
    4、清除再重复。
        一旦读完了一个代码库，再选一个，然后重新开始这个过程。代码读的越多，
        你就能从阅读中获取更好的信息，你花的时间就越少。我认为你会发现投资回报增长很快，
        而且这是一种非常有趣的学习方式。
    5、从哪里入手呢。
        在我阅读代码的过程中，带给我影响力最大的因素就是【GitHub】。
        这个网站让你很容易找到新的项目和优秀的程序员，如果你还没有利用它，
        我觉得你就是在伤害自己。我建议先从GitHub开始，然后直到找到一个你认为可以从中学习的项目，
        再转移到其它网站阅读。接下来可以先从git clone入手开始阅读！


模式：还不太懂
    1、组合模式
    2、享元模式